// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hedge/v1/debian.proto

package hedge

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DebianPackage struct {
	Package       string `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	Source        string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Version       string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	InstalledSize uint64 `protobuf:"varint,4,opt,name=installed_size,json=installedSize,proto3" json:"installed_size,omitempty"`
}

func (m *DebianPackage) Reset()         { *m = DebianPackage{} }
func (m *DebianPackage) String() string { return proto.CompactTextString(m) }
func (*DebianPackage) ProtoMessage()    {}
func (*DebianPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d7bef55e115298, []int{0}
}
func (m *DebianPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebianPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebianPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebianPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebianPackage.Merge(m, src)
}
func (m *DebianPackage) XXX_Size() int {
	return m.Size()
}
func (m *DebianPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_DebianPackage.DiscardUnknown(m)
}

var xxx_messageInfo_DebianPackage proto.InternalMessageInfo

func (m *DebianPackage) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *DebianPackage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *DebianPackage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DebianPackage) GetInstalledSize() uint64 {
	if m != nil {
		return m.InstalledSize
	}
	return 0
}

type DebianPackages struct {
	Packages []*DebianPackage `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
}

func (m *DebianPackages) Reset()         { *m = DebianPackages{} }
func (m *DebianPackages) String() string { return proto.CompactTextString(m) }
func (*DebianPackages) ProtoMessage()    {}
func (*DebianPackages) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d7bef55e115298, []int{1}
}
func (m *DebianPackages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebianPackages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebianPackages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebianPackages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebianPackages.Merge(m, src)
}
func (m *DebianPackages) XXX_Size() int {
	return m.Size()
}
func (m *DebianPackages) XXX_DiscardUnknown() {
	xxx_messageInfo_DebianPackages.DiscardUnknown(m)
}

var xxx_messageInfo_DebianPackages proto.InternalMessageInfo

func (m *DebianPackages) GetPackages() []*DebianPackage {
	if m != nil {
		return m.Packages
	}
	return nil
}

func init() {
	proto.RegisterType((*DebianPackage)(nil), "hedge.v1.DebianPackage")
	proto.RegisterType((*DebianPackages)(nil), "hedge.v1.DebianPackages")
}

func init() { proto.RegisterFile("hedge/v1/debian.proto", fileDescriptor_a2d7bef55e115298) }

var fileDescriptor_a2d7bef55e115298 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x48, 0x4d, 0x49,
	0x4f, 0xd5, 0x2f, 0x33, 0xd4, 0x4f, 0x49, 0x4d, 0xca, 0x4c, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x00, 0x0b, 0xeb, 0x95, 0x19, 0x2a, 0x35, 0x31, 0x72, 0xf1, 0xba, 0x80, 0xa5,
	0x02, 0x12, 0x93, 0xb3, 0x13, 0xd3, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x0b, 0x20, 0x4c, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x48, 0x8c, 0x8b, 0xad, 0x38, 0xbf, 0xb4, 0x28, 0x39,
	0x55, 0x82, 0x09, 0x2c, 0x01, 0xe5, 0x81, 0x74, 0x94, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0x49,
	0x30, 0x43, 0x74, 0x40, 0xb9, 0x42, 0xaa, 0x5c, 0x7c, 0x99, 0x79, 0xc5, 0x25, 0x89, 0x39, 0x39,
	0xa9, 0x29, 0xf1, 0xc5, 0x99, 0x55, 0xa9, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0xbc, 0x70,
	0xd1, 0xe0, 0xcc, 0xaa, 0x54, 0x25, 0x57, 0x2e, 0x3e, 0x14, 0x37, 0x14, 0x0b, 0x19, 0x73, 0x71,
	0x40, 0x6d, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x12, 0xd7, 0x83, 0xb9, 0x59, 0x0f,
	0x45, 0x6d, 0x10, 0x5c, 0xa1, 0xd3, 0x44, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96,
	0x63, 0xe0, 0xe2, 0x49, 0xce, 0xcf, 0x85, 0x1b, 0xe0, 0xc4, 0x0d, 0x35, 0x01, 0x14, 0x16, 0x01,
	0x8c, 0x51, 0xd2, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x25, 0x19,
	0xa9, 0x05, 0xe5, 0x89, 0xe9, 0x79, 0xa9, 0x45, 0xfa, 0x60, 0xe5, 0x8b, 0x98, 0x98, 0x3d, 0x22,
	0x22, 0x56, 0x31, 0x71, 0x78, 0x80, 0x35, 0x87, 0x19, 0x9e, 0x82, 0x32, 0x63, 0xc2, 0x0c, 0x1f,
	0x31, 0x89, 0xc0, 0x98, 0x31, 0xee, 0x01, 0x4e, 0xbe, 0xa9, 0x25, 0x89, 0x29, 0x89, 0x25, 0x89,
	0xaf, 0x98, 0x38, 0xc1, 0xc2, 0x56, 0x56, 0x61, 0x86, 0x49, 0x6c, 0xe0, 0x00, 0x37, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x4d, 0x22, 0xd4, 0x4f, 0x89, 0x01, 0x00, 0x00,
}

func (m *DebianPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebianPackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebianPackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InstalledSize != 0 {
		i = encodeVarintDebian(dAtA, i, uint64(m.InstalledSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDebian(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintDebian(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintDebian(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebianPackages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebianPackages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebianPackages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packages) > 0 {
		for iNdEx := len(m.Packages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDebian(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDebian(dAtA []byte, offset int, v uint64) int {
	offset -= sovDebian(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DebianPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovDebian(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovDebian(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDebian(uint64(l))
	}
	if m.InstalledSize != 0 {
		n += 1 + sovDebian(uint64(m.InstalledSize))
	}
	return n
}

func (m *DebianPackages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Packages) > 0 {
		for _, e := range m.Packages {
			l = e.Size()
			n += 1 + l + sovDebian(uint64(l))
		}
	}
	return n
}

func sovDebian(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDebian(x uint64) (n int) {
	return sovDebian(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DebianPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebian
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebianPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebianPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebian
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebian
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebian
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebian
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebian
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebian
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstalledSize", wireType)
			}
			m.InstalledSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstalledSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebian(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebian
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebianPackages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebian
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebianPackages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebianPackages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebian
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebian
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packages = append(m.Packages, &DebianPackage{})
			if err := m.Packages[len(m.Packages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebian(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebian
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebian(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebian
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebian
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebian
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDebian
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDebian
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDebian
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDebian        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebian          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDebian = fmt.Errorf("proto: unexpected end of group")
)
